basePath: /
definitions:
  accounts.CreateUser:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
    required:
    - first_name
    - last_name
    - password
    - phone
    type: object
  accounts.LoginSerializer:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  accounts.UserSerializer:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
    type: object
  cart.AddProduct:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  models.Cart:
    properties:
      id:
        type: integer
      products:
        items:
          $ref: '#/definitions/models.CartItem'
        type: array
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.CartItem:
    properties:
      id:
        type: integer
      order:
        $ref: '#/definitions/models.Order'
      order_id:
        type: integer
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      quantity:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Categories:
    properties:
      id:
        type: integer
      title:
        type: string
    type: object
  models.Order:
    properties:
      id:
        type: integer
      order_items:
        items:
          $ref: '#/definitions/models.CartItem'
        type: array
      price:
        type: number
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Product:
    properties:
      description:
        type: string
      id:
        type: integer
      main_image:
        type: string
      price:
        type: number
      product_category:
        items:
          $ref: '#/definitions/models.Categories'
        type: array
      store:
        $ref: '#/definitions/models.Stores'
      store_id:
        type: integer
      sub_images:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - description
    - title
    type: object
  models.Stores:
    properties:
      id:
        type: integer
      image:
        type: string
      owner:
        $ref: '#/definitions/models.User'
      store_name:
        type: string
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      first_name:
        maxLength: 40
        minLength: 2
        type: string
      id:
        type: integer
      last_name:
        maxLength: 40
        minLength: 2
        type: string
      password:
        type: string
      phone:
        type: string
      refresh_token:
        type: string
      token:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone
    type: object
  products.ProductSerializer:
    properties:
      description:
        type: string
      id:
        type: integer
      main_image:
        type: string
      price:
        type: integer
      product_category:
        items:
          $ref: '#/definitions/models.Categories'
        type: array
      store:
        $ref: '#/definitions/models.Stores'
      sub_images:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - title
    type: object
  stores.StoresSerializer:
    properties:
      id:
        type: integer
      image:
        type: string
      owner:
        $ref: '#/definitions/accounts.UserSerializer'
      store_name:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: A golang microservice for ecommerce
  title: An ecommerce Api
  version: "1.0"
paths:
  /accounts/login:
    post:
      consumes:
      - application/json
      description: Endpoint for log in
      parameters:
      - description: Login Body Payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/accounts.LoginSerializer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Login
      tags:
      - Accounts
  /accounts/profile:
    get:
      description: Endpoint for getting a user based on id
      parameters:
      - description: Token for Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accounts.UserSerializer'
        "400":
          description: Bad Request
      summary: Get User Profile
      tags:
      - Accounts
  /accounts/signup:
    post:
      consumes:
      - application/json
      description: Endpoint for creating all categories of users
      parameters:
      - description: SignUp Body Payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/accounts.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accounts.UserSerializer'
        "201":
          description: Created
        "302":
          description: Found
        "400":
          description: Bad Request
      summary: Create Users
      tags:
      - Accounts
  /cart/add-to-cart:
    post:
      description: Add a product to cart
      parameters:
      - description: Token for Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: Token for Authorization
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/cart.AddProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Add to Cart
      tags:
      - Cart
  /products/get-all:
    get:
      description: Retrieve a list of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/products.ProductSerializer'
            type: array
        "404":
          description: Not Found
      summary: Get all Products
      tags:
      - Products
  /stores/create:
    post:
      consumes:
      - application/json
      description: New store using json request body
      parameters:
      - description: Stores Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/stores.StoresSerializer'
      summary: Create a new store using
      tags:
      - Stores
  /stores/get-all:
    get:
      description: Retrieve a list of all Stores
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/stores.StoresSerializer'
            type: array
        "404":
          description: Not Found
      summary: Get all Stores
      tags:
      - Stores
  /stores/get-user-store:
    get:
      description: Retrieve a the store belonging to a logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/stores.StoresSerializer'
            type: array
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      summary: Get a user store
      tags:
      - Stores
swagger: "2.0"
